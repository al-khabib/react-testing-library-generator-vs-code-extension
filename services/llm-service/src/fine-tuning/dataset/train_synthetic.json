[
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React from 'react';\n\nexport default function SubmitButton({ disabled }) {\n  return <button disabled={disabled}>Submit</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport SubmitButton from './SubmitButton';\n\ndescribe('SubmitButton', () => {\n  it('is enabled when disabled prop is false', () => {\n    render(<SubmitButton disabled={false} />);\n    expect(screen.getByRole('button', { name: /submit/i })).not.toBeDisabled();\n  });\n  it('is disabled when disabled prop is true', () => {\n    render(<SubmitButton disabled />);\n    expect(screen.getByRole('button', { name: /submit/i })).toBeDisabled();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React from 'react';\n\nexport default function SubmitButton({ disabled }) {\n  return <button disabled={disabled}>Submit</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport SubmitButton from './SubmitButton';\n\ndescribe('SubmitButton', () => {\n  it('is enabled when disabled prop is false', () => {\n    render(<SubmitButton disabled={false} />);\n    expect(screen.getByRole('button', { name: /submit/i })).not.toBeDisabled();\n  });\n  it('is disabled when disabled prop is true', () => {\n    render(<SubmitButton disabled />);\n    expect(screen.getByRole('button', { name: /submit/i })).toBeDisabled();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write unit tests using React Testing Library and Jest for this component.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Write unit tests using React Testing Library and Jest for this component.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write tests that check rendering, props, and events using accessible queries.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write tests that check rendering, props, and events using accessible queries.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Generate RTL + Jest tests that verify rendering and interactions.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Generate RTL + Jest tests that verify rendering and interactions.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Generate RTL + Jest tests that verify rendering and interactions.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write unit tests using React Testing Library and Jest for this component.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write tests that check rendering, props, and events using accessible queries.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React from 'react';\n\nexport default function SubmitButton({ disabled }) {\n  return <button disabled={disabled}>Submit</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport SubmitButton from './SubmitButton';\n\ndescribe('SubmitButton', () => {\n  it('is enabled when disabled prop is false', () => {\n    render(<SubmitButton disabled={false} />);\n    expect(screen.getByRole('button', { name: /submit/i })).not.toBeDisabled();\n  });\n  it('is disabled when disabled prop is true', () => {\n    render(<SubmitButton disabled />);\n    expect(screen.getByRole('button', { name: /submit/i })).toBeDisabled();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Generate RTL + Jest tests that verify rendering and interactions.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write unit tests using React Testing Library and Jest for this component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Write unit tests using React Testing Library and Jest for this component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Write tests that check rendering, props, and events using accessible queries.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write unit tests using React Testing Library and Jest for this component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React from 'react';\n\nexport default function SubmitButton({ disabled }) {\n  return <button disabled={disabled}>Submit</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport SubmitButton from './SubmitButton';\n\ndescribe('SubmitButton', () => {\n  it('is enabled when disabled prop is false', () => {\n    render(<SubmitButton disabled={false} />);\n    expect(screen.getByRole('button', { name: /submit/i })).not.toBeDisabled();\n  });\n  it('is disabled when disabled prop is true', () => {\n    render(<SubmitButton disabled />);\n    expect(screen.getByRole('button', { name: /submit/i })).toBeDisabled();\n  });\n});"
  },
  {
    "instruction": "Write unit tests using React Testing Library and Jest for this component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React from 'react';\n\nexport default function SubmitButton({ disabled }) {\n  return <button disabled={disabled}>Submit</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport SubmitButton from './SubmitButton';\n\ndescribe('SubmitButton', () => {\n  it('is enabled when disabled prop is false', () => {\n    render(<SubmitButton disabled={false} />);\n    expect(screen.getByRole('button', { name: /submit/i })).not.toBeDisabled();\n  });\n  it('is disabled when disabled prop is true', () => {\n    render(<SubmitButton disabled />);\n    expect(screen.getByRole('button', { name: /submit/i })).toBeDisabled();\n  });\n});"
  },
  {
    "instruction": "Write tests that check rendering, props, and events using accessible queries.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Generate RTL + Jest tests that verify rendering and interactions.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Write tests that check rendering, props, and events using accessible queries.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write tests that check rendering, props, and events using accessible queries.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Write unit tests using React Testing Library and Jest for this component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write tests that check rendering, props, and events using accessible queries.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React from 'react';\n\nexport default function SubmitButton({ disabled }) {\n  return <button disabled={disabled}>Submit</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport SubmitButton from './SubmitButton';\n\ndescribe('SubmitButton', () => {\n  it('is enabled when disabled prop is false', () => {\n    render(<SubmitButton disabled={false} />);\n    expect(screen.getByRole('button', { name: /submit/i })).not.toBeDisabled();\n  });\n  it('is disabled when disabled prop is true', () => {\n    render(<SubmitButton disabled />);\n    expect(screen.getByRole('button', { name: /submit/i })).toBeDisabled();\n  });\n});"
  },
  {
    "instruction": "Write unit tests using React Testing Library and Jest for this component.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Write tests that check rendering, props, and events using accessible queries.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Generate RTL + Jest tests that verify rendering and interactions.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write unit tests using React Testing Library and Jest for this component.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Generate RTL + Jest tests that verify rendering and interactions.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Generate RTL + Jest tests that verify rendering and interactions.",
    "input": "import React from 'react';\n\nexport default function SubmitButton({ disabled }) {\n  return <button disabled={disabled}>Submit</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport SubmitButton from './SubmitButton';\n\ndescribe('SubmitButton', () => {\n  it('is enabled when disabled prop is false', () => {\n    render(<SubmitButton disabled={false} />);\n    expect(screen.getByRole('button', { name: /submit/i })).not.toBeDisabled();\n  });\n  it('is disabled when disabled prop is true', () => {\n    render(<SubmitButton disabled />);\n    expect(screen.getByRole('button', { name: /submit/i })).toBeDisabled();\n  });\n});"
  },
  {
    "instruction": "Write unit tests using React Testing Library and Jest for this component.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function LoginForm({ onSubmit }) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <form onSubmit={e => { e.preventDefault(); onSubmit({ username, password }); }}>\n      <label htmlFor=\"username\">Username</label>\n      <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\n      <label htmlFor=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('submits username and password', async () => {\n    const handleSubmit = jest.fn();\n    render(<LoginForm onSubmit={handleSubmit} />);\n    const user = userEvent.setup();\n    await user.type(screen.getByLabelText(/username/i), 'bob');\n    await user.type(screen.getByLabelText(/password/i), 'secret');\n    await user.click(screen.getByRole('button', { name: /login/i }));\n    expect(handleSubmit).toHaveBeenCalledWith({ username: 'bob', password: 'secret' });\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write unit tests using React Testing Library and Jest for this component.",
    "input": "import React from 'react';\n\nexport default function SubmitButton({ disabled }) {\n  return <button disabled={disabled}>Submit</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport SubmitButton from './SubmitButton';\n\ndescribe('SubmitButton', () => {\n  it('is enabled when disabled prop is false', () => {\n    render(<SubmitButton disabled={false} />);\n    expect(screen.getByRole('button', { name: /submit/i })).not.toBeDisabled();\n  });\n  it('is disabled when disabled prop is true', () => {\n    render(<SubmitButton disabled />);\n    expect(screen.getByRole('button', { name: /submit/i })).toBeDisabled();\n  });\n});"
  },
  {
    "instruction": "Write tests that check rendering, props, and events using accessible queries.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Generate RTL + Jest tests that verify rendering and interactions.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Write unit tests using React Testing Library and Jest for this component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write tests that check rendering, props, and events using accessible queries.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write tests that check rendering, props, and events using accessible queries.",
    "input": "import React from 'react';\n\nexport default function SubmitButton({ disabled }) {\n  return <button disabled={disabled}>Submit</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport SubmitButton from './SubmitButton';\n\ndescribe('SubmitButton', () => {\n  it('is enabled when disabled prop is false', () => {\n    render(<SubmitButton disabled={false} />);\n    expect(screen.getByRole('button', { name: /submit/i })).not.toBeDisabled();\n  });\n  it('is disabled when disabled prop is true', () => {\n    render(<SubmitButton disabled />);\n    expect(screen.getByRole('button', { name: /submit/i })).toBeDisabled();\n  });\n});"
  },
  {
    "instruction": "Create tests using screen queries and user-event to simulate user behavior.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write tests that check rendering, props, and events using accessible queries.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React from 'react';\n\nexport default function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport Greeting from './Greeting';\n\ndescribe('Greeting', () => {\n  it('renders greeting with provided name', () => {\n    render(<Greeting name=\"Alice\" />);\n    expect(screen.getByRole('heading', { name: /hello, alice/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write unit tests using React Testing Library and Jest for this component.",
    "input": "import React from 'react';\n\nexport default function SubmitButton({ disabled }) {\n  return <button disabled={disabled}>Submit</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport SubmitButton from './SubmitButton';\n\ndescribe('SubmitButton', () => {\n  it('is enabled when disabled prop is false', () => {\n    render(<SubmitButton disabled={false} />);\n    expect(screen.getByRole('button', { name: /submit/i })).not.toBeDisabled();\n  });\n  it('is disabled when disabled prop is true', () => {\n    render(<SubmitButton disabled />);\n    expect(screen.getByRole('button', { name: /submit/i })).toBeDisabled();\n  });\n});"
  },
  {
    "instruction": "Generate RTL + Jest tests that verify rendering and interactions.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  },
  {
    "instruction": "Write tests that check rendering, props, and events using accessible queries.",
    "input": "import React, { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter', () => {\n  it('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 0');\n  });\n\n  it('increments count when button clicked', async () => {\n    render(<Counter />);\n    const btn = screen.getByRole('button', { name: /increment/i });\n    await userEvent.click(btn);\n    expect(screen.getByText(/count:/i)).toHaveTextContent('Count: 1');\n  });\n});"
  },
  {
    "instruction": "Produce a Jest test suite with @testing-library/react for the given component.",
    "input": "import React, { useState } from 'react';\n\nexport default function Toggle() {\n  const [on, setOn] = useState(false);\n  return <button onClick={() => setOn(!on)}>{on ? 'On' : 'Off'}</button>;\n}",
    "output": "import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Toggle from './Toggle';\n\ndescribe('Toggle', () => {\n  it('renders Off initially and toggles', async () => {\n    render(<Toggle />);\n    const btn = screen.getByRole('button', { name: /off/i });\n    expect(btn).toBeInTheDocument();\n    await userEvent.click(btn);\n    expect(screen.getByRole('button', { name: /on/i })).toBeInTheDocument();\n  });\n});"
  }
]